# -*- coding: utf-8 -*-
"""KENTO_N2_OFICIAL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/108vXbIslK78XCwPjA40tYMibAaftLuEC

# Eventos climáticos e seus impactos econômicos.

Este conjunto de dados reúne informações sobre eventos climáticos extremos que ocorreram no mundo entre os anos de 2020 e 2025. Ele mostra não apenas onde e quando esses eventos aconteceram, mas também o impacto que tiveram nas pessoas, nas economias e nas infraestruturas dos países afetados.

Entre os dados registrados, estão o tipo de evento (como enchentes, secas ou tempestades), a duração, a gravidade, o número de pessoas atingidas e até mesmo os custos econômicos causados. Além disso, também são incluídos detalhes sobre mortes, feridos, danos em estruturas e a ajuda internacional enviada para lidar com as consequências.

Em resumo, é um retrato dos efeitos recentes das mudanças climáticas no mundo, permitindo entender melhor não só a frequência desses eventos, mas também as consequências humanas e econômicas que eles trazem.

# 1. **Bibliotecas e configurações iniciais**
"""



import geopy as pt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Parâmetros para gerar gráficos mais "bonitinho"
params = {'legend.fontsize': 'x-large',
          'figure.figsize': (15, 5),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large'}
plt.rcParams.update(params)

"""## **1.1 Importação banco de dados**

"""

df = pd.read_excel('/content/global_climate_events_economic_impact_2020_2025.xlsx')
df.head()



"""## **1.2 Tradução dados**:"""

column_translations = {
    'event_id': 'evento_id',
    'date': 'data',
    'year': 'ano',
    'month': 'mes',
    'country': 'pais',
    'event_type': 'tipo_evento',
    'severity': 'severidade',
    'duration_days': 'duracao_dias',
    'affected_population': 'populacao_afetada',
    'deaths': 'mortes',
    'injuries': 'feridos',
    'economic_impact_million_usd': 'impacto_economico_milhoes_usd',
    'infrastructure_damage_score': 'pontuacao_dano_infraestrutura',
    'response_time_hours': 'tempo_resposta_horas',
    'international_aid_million_usd': 'ajuda_internacional_milhoes_usd',
    'latitude': 'latitude',
    'longitude': 'longitude',
    'total_casualties': 'total_casualidades',
    'impact_per_capita': 'impacto_por_capita',
    'aid_percentage': 'porcentagem_ajuda'
}

df = df.rename(columns=column_translations)
print("Colunas traduzidas:")
print(df.columns)

df.describe()

"""# **2. Limpeza e Pré-processamento dos Dados**

## **2.1 Análise de Dados Ausentes (Missing Values)**

Verifica se há algum valor vazio
"""

print(df.isnull().sum())
#Conta valores vazios por coluna, neste caso, não foi achado nenhum valor vazio

"""## **2.2 Tratamento de Inconsistências**

**Verificamos se há inconsistências com os dados, caso tenha, os trataremos usando alguma estratégia**

***Duplicatas***:
"""

#Aqui verificamos se há valores repetidos
duplicates = df.duplicated()

print("Número de valores duplicados:", duplicates.sum())

df[duplicates]

"""**Valores impossíveis para certas variáveis:**




"""

# Itera as colunas inteiras para tentar achar valores não inteiros
for col in ["populacao_afetada", "mes", "duracao_dias", "feridos", "severidade", "total_casualidades"]:
    non_null_values = df[col].dropna()
    if not non_null_values.empty:
        only_integers = (non_null_values % 1 == 0).all()
        if only_integers:
            print(f"A coluna '{col}' contém apenas inteiros (sem casas decimais).")
        else:
            print(f"A coluna '{col}' possui valores decimais.")
    else:
        print(f"A coluna '{col}' está vazia.")

"""**Valores negativos para certas variáveis:**"""

# Itera as colunas inteiras para tentar achar negativos
for col in ["populacao_afetada", "mes", "duracao_dias", "feridos", "severidade", "total_casualidades","pontuacao_dano_infraestrutura","tempo_resposta_horas","impacto_por_capita","impacto_economico_milhoes_usd"]:
    non_null_values = df[col].dropna()
    if not non_null_values.empty:
        only_integers = (non_null_values >= 0 ).all()
        if only_integers:
            print(f"A coluna '{col}' contém apenas positivos.")
        else:
            print(f"A coluna '{col}' possui valores negativos.")
    else:
        print(f"A coluna '{col}' está vazia.")

"""##  **2.3 Análise de Outliers**

**Verificamos a presença de outliers (valores que fogem muito da média - variabilidade grande)
 Resolvemos deixar esses valores na análise para um entendimento mais completo do dataset**

Abaixo, conseguimos visualizar a presença de outliers nas seguintes variáveis:

*   MORTES
*   POPULAÇÃO AFETADA
*   IMPACTO ECONOMICO
*   TOTAL DE CASUALIDADES
*   IMPACTO PER CAPITA
*   TEMPO DE RESPOSTA EM HORAS
*   PORCENTAGEM DE AJUDA
*   AJUDA INTERNACIONAL EM MILHÕES

Nos gráficos de boxplot é possível obervar que a maioria dos valores se encontram na area do retângulo azul, e alguns outros valores (OUTLIERS) fora.
"""

# Colunas identificados contendo potencialmente outliers
outlier_cols = ['mortes','populacao_afetada','impacto_economico_milhoes_usd', 'pontuacao_dano_infraestrutura',
                'tempo_resposta_horas', 'ajuda_internacional_milhoes_usd',
                'total_casualidades', 'impacto_por_capita', 'porcentagem_ajuda']


# Tradução
portuguese_titles = {
    'deaths': 'Mortes',
    'affected_population': 'População Afetada',
    'economic_impact_million_usd': 'Impacto Econômico (Milhões USD)',
    'infrastructure_damage_score': 'Pontuação de Dano à Infraestrutura',
    'response_time_hours': 'Tempo de Resposta (Horas)',
    'international_aid_million_usd': 'Ajuda Internacional (Milhões USD)',
    'total_casualties': 'Total de Casualidades',
    'impact_per_capita': 'Impacto Per Capita',
    'aid_percentage': 'Porcentagem de Ajuda'
}
# Gerando boxplots
for col in outlier_cols:
    plt.figure(figsize=(15, 8))
    sns.boxplot(data=df, x=col)
    plt.title(f'Boxplot de {portuguese_titles.get(col, col)} (horizontal)')
    plt.show()

"""Aqui, podemos ver que esses valores que fogem da maioria (outliers) ocupam uma certa porcentagem da variável"""

#usamos 3 variaveis para demonstrar
outlier_cols_percentage = ['mortes', 'populacao_afetada', 'tempo_resposta_horas','total_casualidades','impacto_economico_milhoes_usd']
outlier_percentages = {}

for col in outlier_cols_percentage:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]
    percentage_outliers = (len(outliers) / len(df)) * 100
    outlier_percentages[col] = percentage_outliers

# Criando data frame para os valores
outlier_df = pd.DataFrame(list(outlier_percentages.items()), columns=['Variável', 'Porcentagem de Outliers'])


for col, percentage in outlier_percentages.items():
    print(f"Coluna '{col}': {percentage:.2f}% dos valores são considerados outliers.")

#Gera o gráfico de barras
plt.figure(figsize=(12, 7))
sns.barplot(x='Variável', y='Porcentagem de Outliers', data=outlier_df)
plt.title('Porcentagem de Outliers por Variável')
plt.ylabel('Porcentagem')
plt.ylim(0, 100)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Aqui é mostrado a porcentagem de outliers em relação a suas variáveis.

#
"""

df.describe()

"""# **3. Análise exploratória de dados p/ variavéis númericas & categóricas**

##**3.1 Variáveis Númericas**

### **3.1.1 Estatística descritiva**
"""

#Deixamos apenas variáveis númericas para uma primeira análise

categorical_identifiers = ["evento_id", "data", "pais", "tipo_evento","mes"]
df_numeric = df.drop(columns=categorical_identifiers)
df_numeric.describe()

events_per_year = df['ano'].value_counts().sort_index()


plt.figure(figsize=(10, 6))
sns.barplot(x=events_per_year.index, y=events_per_year.values, palette='viridis')
plt.title('Número de Eventos Climáticos por Ano (2020-2025)')
plt.xlabel('Ano')
plt.ylabel('Número de Eventos')
plt.show()

"""Aqui foi feito um scatterplot de Impacto economico x população afetada.

Usamos o regplot para regessão linear
"""

plt.figure(figsize=(10, 6))
sns.regplot(data=df, x='populacao_afetada', y='impacto_economico_milhoes_usd', scatter_kws={'s': 20, 'alpha': 0.5})
plt.title('Impacto Econômico vs. População Afetada com Regressão Linear')
plt.xlabel('População Afetada')
plt.ylabel('Impacto Econômico (Milhões USD)')
plt.show()



# Criação de mapeamento dos países de acordo com suas regiões
country_to_continent_mapping = {
    'Japan': 'Asia',
    'Qatar': 'Asia',
    'Canada': 'North America',
    'Poland': 'Europe',
    'UAE': 'Asia',
    'United States': 'North America',
    'China': 'Asia',
    'France': 'Europe',
    'India': 'Asia',
    'Italy': 'Europe',
    'Germany': 'Europe',
    'Brazil': 'South America',
    'United Kingdom': 'Europe',
    'Russia': 'Europe/Asia',
    'Australia': 'Oceania',
    'Netherlands': 'Europe',
    'Indonesia': 'Asia',
    'Thailand': 'Asia',
    'Switzerland': 'Europe',
    'South Korea': 'Asia',
    'Belgium': 'Europe',
    'Saudi Arabia': 'Asia',
    'Israel': 'Asia',
    'Mexico': 'North America',
    'Pakistan': 'Asia',
    'Czech Republic': 'Europe',
    'Turkey': 'Europe/Asia',
    'Ireland': 'Europe',
    'Iraq': 'Asia',
    'Bangladesh': 'Asia',
    'Austria': 'Europe',
    'Nigeria': 'Africa',
    'Sweden': 'Europe',
    'Denmark': 'Europe',
    'Malaysia': 'Asia',
    'Singapore': 'Asia',
    'South Africa': 'Africa',
    'Argentina': 'South America',
    'Egypt': 'Africa/Asia',
    'Kazakhstan': 'Europe/Asia',
    'Philippines': 'Asia',
    'Chile': 'South America',
    'Portugal': 'Europe',
    'Finland': 'Europe',
    'Hungary': 'Europe',
    'New Zealand': 'Oceania',
    'Vietnam': 'Asia',
    'Romania': 'Europe',
    'Peru': 'South America',
    'Greece': 'Europe',
    'Colombia': 'South America'
}


df_temp = df[['pais', 'impacto_economico_milhoes_usd']].copy()
df_temp['continent'] = df_temp['pais'].map(country_to_continent_mapping)


df_temp.dropna(subset=['continent'], inplace=True)

economic_impact_by_continent = df_temp.groupby('continent')['impacto_economico_milhoes_usd'].sum().sort_values(ascending=False)

# Criando gráfico de barra agrupado por continente
plt.figure(figsize=(12, 7))
sns.barplot(x=economic_impact_by_continent.index, y=economic_impact_by_continent.values, palette='viridis')
plt.title('Impacto Econômico Total por Continente (Milhões USD)')
plt.xlabel('Continente')
plt.ylabel('Impacto Econômico Total (Milhões USD)')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Como há a presença  significativa de outliers nos BOXPLOT impacto economico x tipo de evento, decidimos:

boxplot entre valores menores x - y, agindo como um "zoom" nos valores para melhor visualização


"""

event_type_translations = {
    'Tsunami': 'Tsunami',
    'Hurricane': 'Furacão',
    'Drought': 'Seca',
    'Heatwave': 'Onda de Calor',
    'Wildfire': 'Incêndio Florestal',
    'Flood': 'Inundação',
    'Earthquake': 'Terremoto',
    'Volcanic Eruption': 'Erupção Vulcânica',
    'Blizzard': 'Nevasca',
    'Tornado': 'Tornado',
    'Landslide': 'Deslizamento',
    'Meteor Strike': 'Impacto de Meteoro'
}


df['tipo_evento_traduzido'] = df['tipo_evento'].map(event_type_translations)

# Criando um bloxplot com "zoom" para impacto economico x tipo, entre 0 e 10 milhões USD
sns.boxplot(data=df, x='impacto_economico_milhoes_usd', y='tipo_evento_traduzido', order=df.groupby('tipo_evento_traduzido')['impacto_economico_milhoes_usd'].median().sort_values(ascending=False).index)
plt.title('Impacto Econômico por Tipo de Evento (0-10 Milhões USD)')
plt.xlabel('Impacto Econômico (Milhões USD)')
plt.ylabel('Tipo de Evento')
plt.xlim(0, 10)
plt.show()

# Drop the temporary translated column
df = df.drop(columns=['tipo_evento_traduzido'])

plt.figure(figsize=(20, 10))
sns.boxplot(data=df, x='tempo_resposta_horas', y='pais', order=df.groupby('pais')['tempo_resposta_horas'].median().sort_values(ascending=False).index)
plt.title('Tempo de Resposta por País')
plt.xlabel('Tempo de Resposta (Horas)')
plt.ylabel('País')
plt.yticks(fontsize='small')
plt.show()

"""## **3.2 Variáveis Categóricas**

### **3.2.1 Estatística descritiva**
"""



categorical_cols = df.select_dtypes(include='object').columns
display(df[categorical_cols].describe())
year_counts = df['ano'].value_counts()
most_frequent_year = year_counts.index[0]

print(f"\nO ano com o maior número de eventos climáticos foi: {most_frequent_year}")

categorical_cols = ['pais', 'tipo_evento']
portuguese_titles = {
    'country': 'Frequência por País',
    'event_type': 'Frequência por Tipo de Evento'
}


for col in categorical_cols:
    plt.figure(figsize=(20, 10))
    sns.countplot(data=df, y=col, order=df[col].value_counts().index)
    plt.title(portuguese_titles.get(col, f'Frequência de {col}'))
    plt.xlabel('Contagem')
    plt.ylabel(col)
    plt.yticks(fontsize='small')
    plt.show()

"""**Aqui é demostrado quais eventos climáticos que mais aconteceram no mundo desde 2020, e também quais países mais ocorreram. O ano com o maior número de eventos climáticos foi 2023.**

**Aqui é demostrado quais eventos climáticos que mais aconteceram no mundo desde 2020, e também quais países mais ocorreram. **
"""

economic_impact_by_continent = df_temp.groupby('continent')['impacto_economico_milhoes_usd'].sum().sort_values(ascending=False)
plt.figure(figsize=(12, 7))
sns.barplot(x=economic_impact_by_continent.index, y=economic_impact_by_continent.values, palette='viridis')
plt.title('Impacto Econômico Total por Continente (Milhões USD)')
plt.xlabel('Continente')
plt.ylabel('Impacto Econômico Total (Milhões USD)')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()